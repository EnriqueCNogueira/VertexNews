# OPERA√á√ïES NO BANCO DE DADOS PRINCIPAL
"""
M√≥dulo respons√°vel pelas opera√ß√µes no banco de dados principal (noticias.db)
usado para armazenar not√≠cias selecionadas para exibi√ß√£o na API
"""

import sqlite3
from typing import List, Dict, Optional
from datetime import datetime


class MainOperations:
    """Classe para opera√ß√µes no banco de dados principal"""

    def __init__(self, db_path: str = "noticias.db"):
        """
        Inicializa as opera√ß√µes principais

        Args:
            db_path: Caminho para o banco de dados principal
        """
        self.db_path = db_path

    def check_link_exists(self, link: str) -> bool:
        """
        Verifica se um link j√° existe no banco principal

        Args:
            link: Link da not√≠cia

        Returns:
            True se existe, False caso contr√°rio
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                cursor.execute("""
                    SELECT COUNT(*) FROM noticias WHERE link = ?
                """, (link,))

                count = cursor.fetchone()[0]
                return count > 0

        except Exception as e:
            print(f"Erro ao verificar exist√™ncia do link: {e}")
            return False

    def insert_new_news(self, titulo: str, link: str, imagem: Optional[str],
                        resumo: str, cluster: int) -> bool:
        """
        Insere uma nova not√≠cia no banco principal

        Args:
            titulo: T√≠tulo da not√≠cia
            link: Link da not√≠cia
            imagem: URL da imagem (opcional)
            resumo: Resumo da not√≠cia
            cluster: N√∫mero do cluster

        Returns:
            True se inserido com sucesso, False caso contr√°rio
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                cursor.execute("""
                    INSERT INTO noticias (titulo, link, imagem, resumo, cluster, data_selecao)
                    VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
                """, (titulo, link, imagem, resumo, cluster))

                conn.commit()
                print(f"‚úÖ Nova not√≠cia inserida: {titulo[:50]}...")
                return True

        except sqlite3.IntegrityError:
            print(f"‚ö†Ô∏è Link j√° existe no banco principal: {link}")
            return False
        except Exception as e:
            print(f"‚ùå Erro ao inserir nova not√≠cia: {e}")
            return False

    def update_selection_timestamp(self, link: str) -> bool:
        """
        Atualiza o timestamp de sele√ß√£o para uma not√≠cia existente

        Args:
            link: Link da not√≠cia

        Returns:
            True se atualizado com sucesso, False caso contr√°rio
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                cursor.execute("""
                    UPDATE noticias 
                    SET data_selecao = CURRENT_TIMESTAMP 
                    WHERE link = ?
                """, (link,))

                if cursor.rowcount > 0:
                    conn.commit()
                    print(f"‚úÖ Timestamp atualizado para: {link}")
                    return True
                else:
                    print(f"‚ö†Ô∏è Nenhuma not√≠cia encontrada com link: {link}")
                    return False

        except Exception as e:
            print(f"‚ùå Erro ao atualizar timestamp: {e}")
            return False

    def transfer_selected_news(self, selected_news: List[Dict]) -> Dict[str, int]:
        """
        Transfere not√≠cias selecionadas do banco auxiliar para o principal

        Args:
            selected_news: Lista de dicion√°rios com not√≠cias selecionadas

        Returns:
            Dicion√°rio com estat√≠sticas da transfer√™ncia
        """
        stats = {
            'novas': 0,
            'atualizadas': 0,
            'falhas': 0
        }

        print(
            f"\nüîÑ Transferindo {len(selected_news)} not√≠cias selecionadas...")

        for news in selected_news:
            link = news['link']

            if self.check_link_exists(link):
                # Not√≠cia j√° existe - apenas atualizar timestamp
                if self.update_selection_timestamp(link):
                    stats['atualizadas'] += 1
                else:
                    stats['falhas'] += 1
            else:
                # Nova not√≠cia - inserir
                if self.insert_new_news(
                    news['titulo'],
                    news['link'],
                    news.get('imagem'),
                    news['resumo'],
                    news['cluster']
                ):
                    stats['novas'] += 1
                else:
                    stats['falhas'] += 1

        print(f"\nüìä Estat√≠sticas da transfer√™ncia:")
        print(f"   - Novas not√≠cias: {stats['novas']}")
        print(f"   - Timestamps atualizados: {stats['atualizadas']}")
        print(f"   - Falhas: {stats['falhas']}")

        return stats

    def get_latest_news(self, limit: int = 15) -> List[Dict]:
        """
        Obt√©m as not√≠cias mais recentes ordenadas por data_selecao

        Args:
            limit: N√∫mero m√°ximo de not√≠cias a retornar

        Returns:
            Lista de dicion√°rios com as not√≠cias mais recentes
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()

                cursor.execute("""
                    SELECT id, titulo, link, imagem, resumo, cluster, data_selecao
                    FROM noticias
                    ORDER BY data_selecao DESC
                    LIMIT ?
                """, (limit,))

                rows = cursor.fetchall()
                return [dict(row) for row in rows]

        except Exception as e:
            print(f"‚ùå Erro ao obter not√≠cias recentes: {e}")
            return []

    def get_news_by_cluster(self, cluster: int, limit: int = 50) -> List[Dict]:
        """
        Obt√©m not√≠cias de um cluster espec√≠fico

        Args:
            cluster: N√∫mero do cluster
            limit: N√∫mero m√°ximo de not√≠cias a retornar

        Returns:
            Lista de dicion√°rios com not√≠cias do cluster
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()

                cursor.execute("""
                    SELECT id, titulo, link, imagem, resumo, cluster, data_selecao
                    FROM noticias
                    WHERE cluster = ?
                    ORDER BY data_selecao DESC
                    LIMIT ?
                """, (cluster, limit))

                rows = cursor.fetchall()
                return [dict(row) for row in rows]

        except Exception as e:
            print(f"‚ùå Erro ao obter not√≠cias do cluster {cluster}: {e}")
            return []

    def get_news_by_date_range(self, start_date: str, end_date: str,
                               limit: int = 100) -> List[Dict]:
        """
        Obt√©m not√≠cias em um intervalo de datas

        Args:
            start_date: Data de in√≠cio (formato YYYY-MM-DD)
            end_date: Data de fim (formato YYYY-MM-DD)
            limit: N√∫mero m√°ximo de not√≠cias a retornar

        Returns:
            Lista de dicion√°rios com not√≠cias do per√≠odo
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()

                cursor.execute("""
                    SELECT id, titulo, link, imagem, resumo, cluster, data_selecao
                    FROM noticias
                    WHERE DATE(data_selecao) BETWEEN ? AND ?
                    ORDER BY data_selecao DESC
                    LIMIT ?
                """, (start_date, end_date, limit))

                rows = cursor.fetchall()
                return [dict(row) for row in rows]

        except Exception as e:
            print(f"‚ùå Erro ao obter not√≠cias por per√≠odo: {e}")
            return []

    def search_news(self, search_term: str, limit: int = 50) -> List[Dict]:
        """
        Busca not√≠cias por termo no t√≠tulo ou resumo

        Args:
            search_term: Termo de busca
            limit: N√∫mero m√°ximo de not√≠cias a retornar

        Returns:
            Lista de dicion√°rios com not√≠cias encontradas
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()

                search_pattern = f"%{search_term}%"
                cursor.execute("""
                    SELECT id, titulo, link, imagem, resumo, cluster, data_selecao
                    FROM noticias
                    WHERE titulo LIKE ? OR resumo LIKE ?
                    ORDER BY data_selecao DESC
                    LIMIT ?
                """, (search_pattern, search_pattern, limit))

                rows = cursor.fetchall()
                return [dict(row) for row in rows]

        except Exception as e:
            print(f"‚ùå Erro ao buscar not√≠cias: {e}")
            return []

    def get_statistics(self) -> Dict[str, int]:
        """
        Obt√©m estat√≠sticas do banco principal

        Returns:
            Dicion√°rio com estat√≠sticas
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()

                # Total de not√≠cias
                cursor.execute("SELECT COUNT(*) FROM noticias")
                total = cursor.fetchone()[0]

                # Not√≠cias por cluster
                cursor.execute("""
                    SELECT cluster, COUNT(*) 
                    FROM noticias 
                    WHERE cluster IS NOT NULL
                    GROUP BY cluster
                    ORDER BY cluster
                """)
                clusters = dict(cursor.fetchall())

                # Not√≠cias dos √∫ltimos 7 dias
                cursor.execute("""
                    SELECT COUNT(*) FROM noticias 
                    WHERE data_selecao >= datetime('now', '-7 days')
                """)
                ultimos_7_dias = cursor.fetchone()[0]

                # Not√≠cias dos √∫ltimos 30 dias
                cursor.execute("""
                    SELECT COUNT(*) FROM noticias 
                    WHERE data_selecao >= datetime('now', '-30 days')
                """)
                ultimos_30_dias = cursor.fetchone()[0]

                return {
                    'total': total,
                    'ultimos_7_dias': ultimos_7_dias,
                    'ultimos_30_dias': ultimos_30_dias,
                    'por_cluster': clusters
                }

        except Exception as e:
            print(f"‚ùå Erro ao obter estat√≠sticas: {e}")
            return {}

    def get_api_data(self, limit: int = 15) -> List[Dict]:
        """
        Obt√©m dados formatados para a API

        Args:
            limit: N√∫mero m√°ximo de not√≠cias a retornar

        Returns:
            Lista de dicion√°rios formatados para a API
        """
        try:
            news = self.get_latest_news(limit)

            # Formatar dados para a API
            api_data = []
            for item in news:
                api_item = {
                    'id': item['id'],
                    'titulo': item['titulo'],
                    'link': item['link'],
                    'imagem': item['imagem'],
                    'resumo': item['resumo'],
                    'cluster': item['cluster'],
                    'data_selecao': item['data_selecao']
                }
                api_data.append(api_item)

            return api_data

        except Exception as e:
            print(f"‚ùå Erro ao obter dados da API: {e}")
            return []


# Inst√¢ncia global para opera√ß√µes principais
main_ops = MainOperations()


def get_main_operations() -> MainOperations:
    """
    Fun√ß√£o de conveni√™ncia para obter a inst√¢ncia das opera√ß√µes principais

    Returns:
        Inst√¢ncia de MainOperations
    """
    return main_ops


if __name__ == "__main__":
    # Teste das opera√ß√µes principais
    ops = get_main_operations()

    # Teste de verifica√ß√£o de link
    exists = ops.check_link_exists("https://teste.com")
    print(f"Link existe: {exists}")

    # Teste de estat√≠sticas
    stats = ops.get_statistics()
    print(f"Estat√≠sticas: {stats}")

    # Teste de dados da API
    api_data = ops.get_api_data(5)
    print(f"Dados da API: {len(api_data)} not√≠cias")
